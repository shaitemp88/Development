pipeline {
    agent any
    // Environmant variables
    parameters {
		string(name: 'INTERVAL', defaultValue: "300", description: 'The time in seconds where the script run')
	}
	environment {
	    INTERVAL = "${env.INTERVAL}"
	    DOCKERBUILD = "development/test:${env.BUILD_NUMBER}"
	    DOCKERRUNNAME = "run1"
	}
    stages {
        stage ('Init') {
            steps {
                cleanWs()
                // We need to explicitly checkout from SCM here
                echo "Building ${env.JOB_NAME}..."
                echo "Interval $INTERVAL..."
                // sh 'docker rm ${docker ps --all -q}'
                // sh 'docker image rm ${docker images -q}'
                // sh 'printenv'
            }
        }
        stage ('Get code') {
            //agent {docker {image ciConfig.buildImage}}
            steps {
                script {
                    // consul
                    sh 'git clone -b main https://github.com/shaitemp88/Development.git'
                }
            }
        }
        stage ('Build Dockerfile'){
            steps{
                script {
                    sh 'ls'
                    sh 'docker build -t $DOCKERBUILD ./Development/'
                }
            }
        }
        stage('Remove old Docker containers'){
            steps{
                script{
                    def doc_containers = sh(returnStdout: true, script: 'docker container ps -aq').replaceAll("\n", " ") 
                    if (doc_containers) {
                        sh "docker stop ${doc_containers}"
                        sh "docker rm ${doc_containers}"
                    }
                }
            }
        }
        stage ('Run Docker from build')
        {
            steps{
                script {
                    // SUCCESS_BUILD=`wget -qO- http://jenkins_url:8080/job/jobname/lastSuccessfulBuild/buildNumber`
                    sh 'docker run --env INTERVAL=$INTERVAL --name $DOCKERRUNNAME -tid $DOCKERBUILD'
                    sh 'sleep 10'
                    sh 'docker logs $DOCKERRUNNAME'
                }
            }
        }
    }
}
